package net.Ruben54213.lobbyEngine.Utility;

import org.bukkit.ChatColor;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.EntityDamageEvent;
import org.bukkit.event.entity.EntityDamageByEntityEvent;
import org.bukkit.event.entity.FoodLevelChangeEvent;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.plugin.java.JavaPlugin;

import java.util.HashSet;
import java.util.Set;
import java.util.UUID;

/**
 * Macht Spieler komplett unverwundbar in der Lobby - OHNE Potion-Effekte
 */
public class PlayerInvulnerabilityManager implements Listener {

    private final JavaPlugin plugin;
    private final Set<UUID> invulnerablePlayers = new HashSet<>();

    public PlayerInvulnerabilityManager(JavaPlugin plugin) {
        this.plugin = plugin;
    }

    /**
     * Macht einen Spieler unverwundbar
     */
    public void makePlayerInvulnerable(Player player) {
        UUID uuid = player.getUniqueId();
        invulnerablePlayers.add(uuid);

        // Gesundheit und Hunger auf Maximum setzen
        player.setHealth(player.getMaxHealth());
        player.setFoodLevel(20);
        player.setSaturation(20.0f);

        plugin.getLogger().info("Made player invulnerable: " + player.getName());
    }

    /**
     * Entfernt Unverwundbarkeit von einem Spieler
     */
    public void removePlayerInvulnerability(Player player) {
        UUID uuid = player.getUniqueId();
        invulnerablePlayers.remove(uuid);

        plugin.getLogger().info("Removed invulnerability from player: " + player.getName());
    }

    /**
     * Prüft ob ein Spieler unverwundbar ist
     */
    public boolean isPlayerInvulnerable(Player player) {
        return invulnerablePlayers.contains(player.getUniqueId());
    }

    /**
     * Macht alle Online-Spieler unverwundbar
     */
    public void makeAllPlayersInvulnerable() {
        for (Player player : plugin.getServer().getOnlinePlayers()) {
            makePlayerInvulnerable(player);
        }
    }

    // ==================== EVENT HANDLERS ====================

    /**
     * Macht neue Spieler automatisch unverwundbar
     */
    @EventHandler(priority = EventPriority.HIGH)
    public void onPlayerJoin(PlayerJoinEvent event) {
        Player player = event.getPlayer();

        // Nach kurzer Verzögerung unverwundbar machen
        plugin.getServer().getScheduler().runTaskLater(plugin, () -> {
            makePlayerInvulnerable(player);
        }, 10L); // 0.5 Sekunden Verzögerung
    }

    /**
     * Verhindert ALLE Arten von Schaden für unverwundbare Spieler
     */
    @EventHandler(priority = EventPriority.HIGHEST)
    public void onEntityDamage(EntityDamageEvent event) {
        if (!(event.getEntity() instanceof Player)) return;

        Player player = (Player) event.getEntity();

        if (isPlayerInvulnerable(player)) {
            event.setCancelled(true);

            // Gesundheit und Hunger sofort wiederherstellen
            player.setHealth(player.getMaxHealth());
            player.setFoodLevel(20);
            player.setSaturation(20.0f);

            // Optional: Debug-Nachricht nur für bestimmte Damage-Arten
            if (event.getCause() == EntityDamageEvent.DamageCause.LAVA ||
                    event.getCause() == EntityDamageEvent.DamageCause.FIRE ||
                    event.getCause() == EntityDamageEvent.DamageCause.FIRE_TICK) {
                // player.sendMessage(ChatColor.translateAlternateColorCodes('&', "&7Protected from " + event.getCause().name().toLowerCase()));
            }
        }
    }

    /**
     * Verhindert PvP-Schaden für unverwundbare Spieler
     */
    @EventHandler(priority = EventPriority.HIGHEST)
    public void onEntityDamageByEntity(EntityDamageByEntityEvent event) {
        if (!(event.getEntity() instanceof Player)) return;

        Player player = (Player) event.getEntity();

        if (isPlayerInvulnerable(player)) {
            event.setCancelled(true);

            // Gesundheit sofort wiederherstellen
            player.setHealth(player.getMaxHealth());
        }
    }

    /**
     * Verhindert Hunger-Verlust für unverwundbare Spieler
     */
    @EventHandler(priority = EventPriority.HIGH)
    public void onFoodLevelChange(FoodLevelChangeEvent event) {
        if (!(event.getEntity() instanceof Player)) return;

        Player player = (Player) event.getEntity();

        if (isPlayerInvulnerable(player)) {
            event.setCancelled(true);

            // Hunger auf Maximum halten
            player.setFoodLevel(20);
            player.setSaturation(20.0f);
        }
    }

    // ==================== UTILITY METHODEN ====================

    /**
     * Bereinigt Spieler-Daten beim Disconnect
     */
    public void cleanupPlayer(Player player) {
        invulnerablePlayers.remove(player.getUniqueId());
    }

    /**
     * Gibt die Anzahl unverwundbarer Spieler zurück
     */
    public int getInvulnerablePlayerCount() {
        return invulnerablePlayers.size();
    }

    /**
     * Entfernt alle unverwundbaren Spieler (für Plugin-Shutdown)
     */
    public void removeAllInvulnerability() {
        invulnerablePlayers.clear();
        plugin.getLogger().info("Removed invulnerability from all players");
    }

    /**
     * Registriert diesen Listener beim Plugin
     */
    public void register() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
        plugin.getLogger().info("PlayerInvulnerabilityManager registered - No Potion Effects Mode!");
    }
}